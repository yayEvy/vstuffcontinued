buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.0'
        classpath "org.jlleitschuh.gradle:ktlint-gradle:12.1.1"

        // OPTIONAL Gradle plugin for Kotlin Serialization
        //classpath 'org.jetbrains.kotlin:kotlin-serialization:1.6.10'

    }
}

plugins {
    // Adds the Kotlin Gradle plugin
    id "org.jetbrains.kotlin.jvm" version "1.9.22"
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.22'

    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "org.jetbrains.kotlin.jvm"


String gitRevision = "git rev-parse HEAD".execute().text.trim()
if (gitRevision.length() >= 10) {
    version = mod_version + '+' + gitRevision.substring(0, 10)
} else {
    version = mod_version + '+unknown'
}


publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "net.illuc.vs_addon_template"
            version = project.version
            artifactId = project.archives_base_name.toLowerCase()
            from components.java
        }
    }

    repositories {
        if (System.getenv("GITHUB_ACTOR") != null) {
            println "Publishing to Github Packages ($version)"
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/illucc/Kontraption")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
                }
            }
        }
    }
}


//group = mod_version

base {
    archivesName = mod_id //+ version
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    copyIdeResources = true
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
            jvmArgs '-Dforge.logging.markers=REGISTRIES'

        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            jvmArgs '-Dforge.logging.markers=REGISTRIES'

        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "mixins.vstuff.refmap.json"

    config "vstuff.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()

    maven { url 'https://modmaven.dev/' }



    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }



    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org"
    }

    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }

    maven {
        name = "Valkyrien Skies Internal"
        url = 'https://maven.valkyrienskies.org'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }


    flatDir {
        dir 'libs'
    }

    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation("org.valkyrienskies.core:api:${vs_core_version}")
    implementation("org.valkyrienskies.core:impl:${vs_core_version}")
    implementation("org.valkyrienskies.core:api-game:${vs_core_version}")
    implementation("org.valkyrienskies.core:util:${vs_core_version}")
    implementation fg.deobf("org.valkyrienskies:valkyrienskies-120-forge:${vs2_version}")

    implementation "org.joml:joml:1.10.5"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
    implementation 'thedarkcolour:kotlinforforge:4.10.0'

    runtimeOnly fg.deobf("maven.modrinth:create-clockwork:1.20.1-0.1.16")
    compileOnly fg.deobf("maven.modrinth:create-stuff-additions:2.0.8")

    implementation fg.deobf("maven.modrinth:architectury-api:9.2.14+forge")
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")


  //  compileOnly fg.deobf(files("libs/create-stuff-additions1.20.1_v2.0.8.jar"))
    //implementation fg.deobf("maven.modrinth:vlib:1.20.1-0.0.11-alpha+forge")
   // implementation fg.deobf("maven.modrinth:forgified-fabric-api:0.92.2+1.11.12+1.20.1")

    compileOnly fg.deobf("maven.modrinth:vmod:lK0oLDaV")




}





configurations {
    shade
    implementation.extendsFrom shade
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, forge_version: forge_version,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, version: mod_version,
            mod_author: mod_author, mod_description: mod_description, issue_tracker: issue_tracker,
            homepage: homepage, sources: sources, vs2_version: vs2_version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_author,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    //finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}